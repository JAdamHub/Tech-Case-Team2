name: LLM Automation and Reporting

on: [push, pull_request]

# Global permissions for all jobs
permissions:
  contents: write  # Needed for pushing changes
  pages: write     # Needed for GitHub Pages
  id-token: write  # Needed for GitHub Pages

# Environment variables for Python scripts
env:
  PYTHONUNBUFFERED: "1"
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }} # setting OpenAI Api key
  GITHUB_REPOSITORY: ${{ github.repository }}
  PR_NUMBER: ${{ github.event.pull_request.number }} # For PR context

jobs:
  # Removed individual jobs for each script as they are now part of a sequence

  llm_tasks_and_report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false # Set back to false as we'll use explicit token URL
          fetch-depth: 0 # Ã†ndret fra 2 til 0 for at hente hele git-historikken

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Specify a version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # --- STEP 1: Identify changed files and create list --- 
      - name: Identify Changed Files (automate_pull_requests.py - Part 1)
        # This run creates files_to_process.txt
        run: python src/automate_pull_requests.py

      # --- STEP 2: Run Combined Analysis and Modification Script --- 
      - name: Run Combined Analysis and Modifications (combined_flow.py)
        id: combined_tasks
        # Reads files_to_process.txt, potentially modifies files, generates combined report
        run: python src/combined_flow.py
        
      # --- STEP 3: Remove files_to_process.txt before commit ---
      - name: Remove Temporary Files
        run: |
          # Remove temporary file to avoid committing it
          if [ -f files_to_process.txt ]; then
            echo "Removing temporary file files_to_process.txt"
            rm files_to_process.txt
          else
            echo "No files_to_process.txt found to remove"
          fi

      # --- STEP 4: Commit potential changes made by scripts --- 
      - name: Commit LLM Changes
        run: |
          # Configure Git with GitHub Actions user
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Debug: List what was generated
          echo "Checking for generated files before commit:"
          ls -la _llm_changes/ || echo "_llm_changes directory not found or empty before commit"
          echo "Checking for test files:"
          ls -la tests/ || echo "tests directory not found or empty"
          echo "Checking for modified source files:"
          git status --porcelain evaluate/
          
          # Make sure _llm_changes directory exists
          mkdir -p _llm_changes
          
          # Add generated reports and any modified/created files
          # Add tests, reports, modified evaluate files, and the processing list file
          git add tests/ _llm_changes/ evaluate/
          
          # Debug: Check git status after add
          echo "Git status after add:"
          git status
          
          # Commit and push if changes are detected
          echo "Checking for staged changes..."
          if ! git diff --staged --quiet; then
            echo "Changes detected. Committing and pushing..."
            git commit -m "chore: Apply LLM fixes and generated reports [skip ci]

            - Applied automated code fixes (e.g., linting)
            - Generated new test files
            - Created LLM change reports" && \
            # Explicitly set remote URL with token for authentication
            git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }} && \
            # Determine the correct branch reference and push
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then 
              echo "Pushing changes to PR branch: ${{ github.head_ref }}"; 
              git push origin HEAD:${{ github.head_ref }}; 
            else 
              echo "Pushing changes to branch: ${{ github.ref_name }}"; 
              git push origin HEAD:${{ github.ref_name }}; 
            fi || {
              # Handle potential push errors
              echo "Error: Failed to push changes."
              echo "This may be due to branch protection rules or token permissions."
              exit 1 # Exit with error if push fails
            }
          else
              echo "No changes detected to commit."
          fi
          
        # Do not continue on error if commit/push fails, unless it's a PR and we explicitly allow it (removed continue-on-error)

      # --- STEP 5: Setup and Build Jekyll Site --- 
      - name: Setup Ruby and Jekyll
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1' # Use a version compatible with github-pages gem
          bundler-cache: true # Runs bundle install and caches gems

      - name: Setup GitHub Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Build Jekyll site
        # Use GITHUB_REPOSITORY to set baseurl correctly
        run: JEKYLL_ENV=production bundle exec jekyll build --baseurl ${{ steps.pages.outputs.base_path }}
        env:
           JEKYLL_BASEURL: ${{ steps.pages.outputs.base_path }}

      - name: Verify Jekyll Build
        run: |
          echo "Checking for _llm_changes content in build:"
          ls -la _site/ || echo "No _site directory found!"
          # Check for specific report files or index if changes dir isn't directly mapped
          echo "Checking for index file in Jekyll build changes directory (if exists):"
          ls -la _site/_llm_changes/ || echo "LLM changes directory ('_llm_changes') not found in _site!"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        # Automatically uploads the '_site' directory

      # --- STEP 6: Deploy to GitHub Pages --- 
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        # This action handles the deployment to the gh-pages branch

      # --- STEP 7: Create Pull Request (Now runs last) --- 
      - name: Create Pull Request (automate_pull_requests.py - Part 2)
        # This run uses the (potentially updated) files to generate description and create PR
        # Only run if on a push event to a branch (not main/master, and not a tag)
        # or specifically on pull_request events if desired (adjust condition needed)
        if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master'
        run: python src/automate_pull_requests.py