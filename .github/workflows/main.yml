name: LLM Automation and Reporting

on: [push, pull_request]

# Global permissions for all jobs
permissions:
  contents: write  # Needed for pushing changes
  pages: write     # Needed for GitHub Pages
  id-token: write  # Needed for GitHub Pages

# Environment variables for Python scripts
env:
  PYTHONUNBUFFERED: "1"
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }} # setting OpenAI Api key
  GITHUB_REPOSITORY: ${{ github.repository }}
  PR_NUMBER: ${{ github.event.pull_request.number }} # For PR context

jobs:
  # Removed individual jobs for each script as they are now part of a sequence

  llm_tasks_and_report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            persist-credentials: false # Set back to false as we'll use explicit token URL
            fetch-depth: 0 # Fetch all history for git diff

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Specify a version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # --- Run LLM Tasks that Modify Code/Generate Reports ---
      - name: Run Bug Fix Suggestions (Analysis Only)
        run: python src/bug_fix_suggestions.py

      - name: Run Admin Tasks Automation (Linting Fixes & Report)
        id: admin_tasks
        run: python src/automate_admin_tasks.py

      - name: Run Workflow Bottleneck Mitigation (Test Generation & Report)
        id: bottlenecks
        run: python src/address_workflow_bottlenecks.py
        
      # Optional: Add Code Review Automation if needed here
      # - name: Run Code Review Automation
      #   if: github.event_name == 'pull_request' # Only run on PRs
      #   run: python src/code_review_automation.py

      # --- Commit potential changes made by scripts (lint fixes, generated tests) ---
      - name: Commit LLM Changes
        run: |
          # Configure Git with GitHub Actions user
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Debug: List what was generated
          echo "Checking for generated files:"
          ls -la _llm_changes/ || echo "_llm_changes directory not found or empty"
          
          # Make sure _llm_changes directory exists
          mkdir -p _llm_changes
          
          # Touch a file to ensure the directory is not empty
          echo "LLM Changes from GitHub Action run at $(date)" > _llm_changes/action_run_marker.md
          
          # Add generated reports and any modified/created files
          # Using -A to stage all changes (new, modified, deleted)
          git add -A
          
          # Debug: Check git status
          echo "Git status:"
          git status
          
          # Commit and push if changes are detected
          echo "Checking for changes..."
          # Use the simpler check and push logic (may fail due to auth issues seen previously)
          git diff --quiet && git diff --staged --quiet || (
            echo "Changes detected. Committing and pushing..." &&
            git commit -m "chore: Apply LLM fixes and generated reports [skip ci]

            - Applied automated code fixes (e.g., linting)
            - Generated new test files
            - Created LLM change reports" && 
            git push || {
              # Handle potential push errors (likely auth related)
              echo "Error: Failed to push changes."
              echo "This might be the recurring authentication issue (fatal: could not read Username)."
              echo "Consider re-adding explicit token authentication if this persists."
              exit 1
            }
          ) || echo "No changes detected to commit."
          
        # Continue even if commit/push fails (e.g., no changes, protected branch)
        continue-on-error: ${{ github.event_name == 'pull_request' }}  # Only allow errors to be ignored for PRs, not for pushes

      # --- Setup and Build Jekyll Site ---
      - name: Setup Ruby and Jekyll
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1' # Use a version compatible with github-pages gem
          bundler-cache: true # Runs bundle install and caches gems

      - name: Setup GitHub Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Build Jekyll site
        # Use GITHUB_REPOSITORY to set baseurl correctly
        run: JEKYLL_ENV=production bundle exec jekyll build --baseurl ${{ steps.pages.outputs.base_path }}
        env:
           JEKYLL_BASEURL: ${{ steps.pages.outputs.base_path }}

      - name: Verify Jekyll Build
        run: |
          echo "Checking for _llm_changes content in build:"
          ls -la _site/ || echo "No _site directory found!"
          echo "Checking for changes directory in Jekyll build:"
          ls -la _site/changes/ || echo "Changes directory not found in _site!"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        # Automatically uploads the '_site' directory

      # --- Deploy to GitHub Pages ---
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        # This action handles the deployment to the gh-pages branch

  # Optional: Job to create PR (if needed, and separate from main reporting)
  # automate-pull-request:
  #   runs-on: ubuntu-latest
  #   needs: llm_tasks_and_report # Depends on the tasks being done
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/some-feature-branch' # Example condition
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0 # Required for git diff
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #     - name: Run automation script
  #       run: python src/automate_pull_requests.py